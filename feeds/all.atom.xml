<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog</title><link href="https://codykane.github.io/blog/" rel="alternate"></link><link href="https://codykane.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>https://codykane.github.io/blog/</id><updated>2019-06-16T10:20:00-04:00</updated><entry><title>First Blog Post!</title><link href="https://codykane.github.io/blog/blog-1.html" rel="alternate"></link><published>2019-06-16T10:20:00-04:00</published><updated>2019-06-16T10:20:00-04:00</updated><author><name>Cody Kane</name></author><id>tag:codykane.github.io,2019-06-16:/blog/blog-1.html</id><summary type="html">&lt;h1&gt;Simplify with dictionary comprehension&lt;/h1&gt;
&lt;p&gt;So far in my quest to learn python, the basics have been somewhat intuitive and straightforward to implement. Moving into more complex functions, it isn't simply if the code runs or not that matters, simplicity, specificity and ease of interpretation become important factors to be considered …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Simplify with dictionary comprehension&lt;/h1&gt;
&lt;p&gt;So far in my quest to learn python, the basics have been somewhat intuitive and straightforward to implement. Moving into more complex functions, it isn't simply if the code runs or not that matters, simplicity, specificity and ease of interpretation become important factors to be considered. Everyone who has toyed with coding is familiar with "for" &amp;amp; "if" interation statements, even if they're not working in Python. At it's core, dictionary comprehensions derive a dictionary from another dictionary. We'll start by creating a dictionary:&lt;/p&gt;
&lt;p&gt;''' keys = ['a', 'b', 'c', 'd', 'e']
vals = [1,2,3,4,5]
dict = {k:v for (k,v) in zip(keys, values)}
print(dict)'''&lt;/p&gt;
&lt;p&gt;Now lets say we're trying to only return the pairs that contain an odd number. We could do it with a for, if statement like this:&lt;/p&gt;
&lt;p&gt;'''for n in dict:
    if n%2==1:
        new_dict[n] = n
        return new_dict'''&lt;/p&gt;
&lt;p&gt;This method is relativly clear to read, even for those that familiar to coding. This is both good and bad, as I've found myself leaning on it at times when dictionary comprehension would make my life easier. Compare with the code to do the same thing as a dict comprehension.&lt;/p&gt;
&lt;p&gt;'''newdict = {k:v for v in dict if v % 2 == 1} 
print(newdict)'''&lt;/p&gt;
&lt;p&gt;This method takes a little bit longer to understand intuitively. Three lines of code have been reduced to one in the above example. Curly brackets are needed to create the new dictionary. The first section calls every key value pait(k:v) for value if that value meets the condition(in this case being an odd number. In situations this simple, their function is the same, but when youneed to add a loop within a loop, this can be really clunky and confusing using for iterations. There is one caveat; while all dictionary comprehensions can be written as for loops, not all for loops can be written as dict comprehensions. &lt;/p&gt;
&lt;p&gt;A couple of resources that helped me get a handle on dictionary comprehensions:&lt;a href="https://www.datacamp.com/community/tutorials/python-dictionary-comprehension"&gt;https://www.datacamp.com/community/tutorials/python-dictionary-comprehension&lt;/a&gt; 
&lt;a href="http://cmdlinetips.com/2018/01/5-examples-using-dict-comprehension/"&gt;http://cmdlinetips.com/2018/01/5-examples-using-dict-comprehension/&lt;/a&gt;
&lt;a href="https://markhneedham.com/blog/2018/04/02/python-list-to-dictionary-comprehensions/"&gt;https://markhneedham.com/blog/2018/04/02/python-list-to-dictionary-comprehensions/&lt;/a&gt; &lt;/p&gt;</content><category term="python"></category></entry><entry><title>Second Blog</title><link href="https://codykane.github.io/blog/blog_2.html" rel="alternate"></link><published>2019-03-29T10:30:00-04:00</published><updated>2019-03-29T10:30:00-04:00</updated><author><name>Cody Kane</name></author><id>tag:codykane.github.io,2019-03-29:/blog/blog_2.html</id><summary type="html">&lt;p&gt;Cursus vitae congue mauris rhoncus. Pulvinar neque laoreet suspendisse interdum. Eu nisl nunc mi ipsum faucibus vitae. Sapien faucibus et molestie ac feugiat sed lectus vestibulum mattis. Nibh tortor id aliquet lectus proin nibh nisl. Sit amet venenatis urna cursus eget. Amet consectetur adipiscing elit duis. Quam pellentesque nec nam …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cursus vitae congue mauris rhoncus. Pulvinar neque laoreet suspendisse interdum. Eu nisl nunc mi ipsum faucibus vitae. Sapien faucibus et molestie ac feugiat sed lectus vestibulum mattis. Nibh tortor id aliquet lectus proin nibh nisl. Sit amet venenatis urna cursus eget. Amet consectetur adipiscing elit duis. Quam pellentesque nec nam aliquam sem et tortor. Congue nisi vitae suscipit tellus.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def hello(name=&amp;#39;max&amp;#39;):
    print(name)
# max is the best
hello()
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry></feed>